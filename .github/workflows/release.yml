name: Release

on:
  release:
    types: [ published ]

env:
  REPO: cashtrack/mysql-backup
  CONTAINER_NAME: cashtrack_mysql_backup
  WORKDIR: /var/www/cash-track.app/mysql/backup

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}

      # Build and push Docker image with Build (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REPO }}
          tags: |
            type=semver,pattern={{version}}

      # Execute deployment script on the server
      # https://github.com/appleboy/ssh-action
      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          IMAGE: ${{ env.REPO }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        with:
          host: ${{ secrets.PRODUCTION_SSH_HOST }}
          username: ${{ secrets.PRODUCTION_SSH_USER }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.WORKDIR }}
            docker pull ${{ env.IMAGE }}
            docker stop ${{ env.CONTAINER_NAME }}
            docker rm -f ${{ env.CONTAINER_NAME }}
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --net host \
              --restart always \
              -e MYSQL_HOST="${{ env.MYSQL_HOST }}" \
              -e MYSQL_PORT="${{ env.MYSQL_PORT }}" \
              -e MYSQL_DATABASE="${{ env.MYSQL_DATABASE }}" \
              -e MYSQL_USER="${{ env.MYSQL_USER }}" \
              -e MYSQL_PASSWORD="${{ env.MYSQL_PASSWORD }}" \
              -e AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}" \
              -e S3_ENDPOINT="${{ env.S3_ENDPOINT }}" \
              -e S3_BUCKET="${{ env.S3_BUCKET }}" \
              ${{ env.IMAGE }}
